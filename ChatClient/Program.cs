using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ChatCommon;

namespace ChatClient
{
    class Program
    {
        private static TcpClient? _tcpClient;
        private static NetworkStream? _stream;
        private static bool _isConnected = false;
        private static string _username = string.Empty;
        private static readonly byte[] _buffer = new byte[ChatProtocol.BUFFER_SIZE];
        private static readonly CancellationTokenSource _cancellationTokenSource = new();

        static async Task Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.UTF8;

            ShowWelcomeScreen();

            try
            {
                await ConnectToServer();
                if (_isConnected)
                {
                    await StartChat();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }
            finally
            {
                await DisconnectFromServer();
            }

            Console.WriteLine("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }

        private static void ShowWelcomeScreen()
        {
            Console.Clear();
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë                    üí¨ –ö–õ–ò–ï–ù–¢ –ß–ê–¢–ê üí¨                        ‚ïë");
            Console.WriteLine("‚ïë                                                              ‚ïë");
            Console.WriteLine("‚ïë  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–∞–º–∏ –∏ TCP/IP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏        ‚ïë");
            Console.WriteLine("‚ïë  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            Console.WriteLine();
        }

        private static async Task ConnectToServer()
        {
            try
            {
                Console.WriteLine("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
                
                _tcpClient = new TcpClient();
                await _tcpClient.ConnectAsync(ChatProtocol.DEFAULT_SERVER, ChatProtocol.PORT);
                _stream = _tcpClient.GetStream();
                _isConnected = true;

                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
                Console.WriteLine();

                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                await Authenticate();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
                _isConnected = false;
            }
        }

        private static async Task Authenticate()
        {
            while (true)
            {
                Console.Write("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
                var username = Console.ReadLine()?.Trim();

                if (string.IsNullOrEmpty(username))
                {
                    Console.WriteLine("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
                    continue;
                }

                _username = username;

                try
                {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    var authMessage = ChatProtocol.CreateAuthRequest(_username);
                    await SendMessageAsync(authMessage);

                    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    var response = await ReceiveMessageAsync();
                    if (response == null)
                    {
                        Console.WriteLine("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç");
                        _isConnected = false;
                        return;
                    }

                    if (response.Command == ChatProtocol.Commands.ERROR)
                    {
                        Console.WriteLine($"‚ùå {response.Data}");
                        continue;
                    }
                    else if (response.Command == ChatProtocol.Commands.SUCCESS)
                    {
                        Console.WriteLine($"‚úÖ {response.Data}");
                        break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex.Message}");
                    _isConnected = false;
                    return;
                }
            }
        }

        private static async Task StartChat()
        {
            Console.WriteLine();
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë                        üöÄ –ß–ê–¢ –ê–ö–¢–ò–í–ï–ù üöÄ                    ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            Console.WriteLine();
            ShowHelp();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            var receiveTask = Task.Run(ReceiveMessagesLoop);

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            while (_isConnected && !_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    Console.Write($"{_username}> ");
                    var input = Console.ReadLine();

                    if (string.IsNullOrEmpty(input)) continue;

                    if (input.ToLower() == "/exit" || input.ToLower() == "/quit")
                    {
                        break;
                    }

                    await ProcessUserInput(input);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {ex.Message}");
                }
            }

            _cancellationTokenSource.Cancel();
            await receiveTask;
        }

        private static async Task ProcessUserInput(string input)
        {
            if (input.StartsWith("/"))
            {
                await HandleCommand(input);
            }
            else
            {
                // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                var message = ChatProtocol.CreateUserMessage(_username, input);
                await SendMessageAsync(message);
            }
        }

        private static async Task HandleCommand(string command)
        {
            var parts = command.Split(' ', 2);
            var cmd = parts[0].ToLower();

            switch (cmd)
            {
                case "/help":
                    ShowHelp();
                    break;
                case "/users":
                case "/online":
                    await SendMessageAsync(new ChatMessage(ChatProtocol.Commands.HELP, "/users", _username));
                    break;
                case "/time":
                    await SendMessageAsync(new ChatMessage(ChatProtocol.Commands.HELP, "/time", _username));
                    break;
                case "/ping":
                    await SendMessageAsync(new ChatMessage(ChatProtocol.Commands.PING, "ping", _username));
                    break;
                case "/pm":
                    if (parts.Length < 2)
                    {
                        Console.WriteLine("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pm <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <—Å–æ–æ–±—â–µ–Ω–∏–µ>");
                        return;
                    }
                    var message = ChatProtocol.CreateUserMessage(_username, command);
                    await SendMessageAsync(message);
                    break;
                default:
                    Console.WriteLine("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
                    break;
            }
        }

        private static void ShowHelp()
        {
            Console.WriteLine();
            Console.WriteLine("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
            Console.WriteLine("  /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
            Console.WriteLine("  /users –∏–ª–∏ /online - —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            Console.WriteLine("  /time - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞");
            Console.WriteLine("  /pm <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            Console.WriteLine("  /ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
            Console.WriteLine("  /exit –∏–ª–∏ /quit - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞");
            Console.WriteLine();
            Console.WriteLine("üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç");
            Console.WriteLine();
        }

        private static async Task ReceiveMessagesLoop()
        {
            while (_isConnected && !_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    var message = await ReceiveMessageAsync();
                    if (message == null)
                    {
                        Console.WriteLine("\n‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ");
                        _isConnected = false;
                        break;
                    }

                    DisplayMessage(message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                    _isConnected = false;
                    break;
                }
            }
        }

        private static void DisplayMessage(ChatMessage message)
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss");
            var color = GetMessageColor(message.Command, message.Sender);

            Console.ForegroundColor = color;

            switch (message.Command)
            {
                case ChatProtocol.Commands.MESSAGE:
                    if (message.Sender == _username)
                    {
                        Console.WriteLine($"[{timestamp}] –í—ã: {message.Data}");
                    }
                    else if (message.Sender == "System")
                    {
                        Console.WriteLine($"üîî [{timestamp}] {message.Data}");
                    }
                    else
                    {
                        Console.WriteLine($"[{timestamp}] {message.Sender}: {message.Data}");
                    }
                    break;

                case ChatProtocol.Commands.USER_JOINED:
                    Console.WriteLine($"üü¢ [{timestamp}] {message.Data}");
                    break;

                case ChatProtocol.Commands.USER_LEFT:
                    Console.WriteLine($"üî¥ [{timestamp}] {message.Data}");
                    break;

                case ChatProtocol.Commands.ONLINE_USERS:
                    Console.WriteLine($"üë• [{timestamp}] –û–Ω–ª–∞–π–Ω: {message.Data}");
                    break;

                case ChatProtocol.Commands.SERVER_TIME:
                    Console.WriteLine($"üïê [{timestamp}] –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {message.Data}");
                    break;

                case ChatProtocol.Commands.ERROR:
                    Console.WriteLine($"‚ùå [{timestamp}] –û—à–∏–±–∫–∞: {message.Data}");
                    break;

                case ChatProtocol.Commands.SUCCESS:
                    Console.WriteLine($"‚úÖ [{timestamp}] {message.Data}");
                    break;

                case ChatProtocol.Commands.PONG:
                    Console.WriteLine($"üèì [{timestamp}] Pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
                    break;

                case ChatProtocol.Commands.HELP:
                    Console.WriteLine($"\nüìã [{timestamp}] –°–ø—Ä–∞–≤–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
                    Console.WriteLine(message.Data);
                    break;

                default:
                    Console.WriteLine($"[{timestamp}] {message.Sender}: {message.Data}");
                    break;
            }

            Console.ResetColor();
        }

        private static ConsoleColor GetMessageColor(string command, string sender)
        {
            return command switch
            {
                ChatProtocol.Commands.ERROR => ConsoleColor.Red,
                ChatProtocol.Commands.SUCCESS => ConsoleColor.Green,
                ChatProtocol.Commands.USER_JOINED => ConsoleColor.Green,
                ChatProtocol.Commands.USER_LEFT => ConsoleColor.Red,
                ChatProtocol.Commands.ONLINE_USERS => ConsoleColor.Cyan,
                ChatProtocol.Commands.SERVER_TIME => ConsoleColor.Yellow,
                ChatProtocol.Commands.HELP => ConsoleColor.Magenta,
                ChatProtocol.Commands.PONG => ConsoleColor.Blue,
                _ when sender == _username => ConsoleColor.Gray,
                _ when sender == "System" => ConsoleColor.Yellow,
                _ => ConsoleColor.White
            };
        }

        private static async Task SendMessageAsync(ChatMessage message)
        {
            if (!_isConnected || _stream == null) return;

            try
            {
                var data = ChatProtocol.EncodeMessage(message);
                await _stream.WriteAsync(data, 0, data.Length);
                await _stream.FlushAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                _isConnected = false;
            }
        }

        private static async Task<ChatMessage?> ReceiveMessageAsync()
        {
            if (!_isConnected || _stream == null) return null;

            try
            {
                int totalBytesRead = 0;
                int bytesRead;

                // –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4 –±–∞–π—Ç–∞)
                while (totalBytesRead < 4)
                {
                    bytesRead = await _stream.ReadAsync(_buffer, totalBytesRead, 4 - totalBytesRead);
                    if (bytesRead == 0)
                    {
                        return null; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                    }
                    totalBytesRead += bytesRead;
                }

                int messageLength = BitConverter.ToInt32(_buffer, 0);
                if (messageLength <= 0 || messageLength > ChatProtocol.BUFFER_SIZE - 4)
                {
                    throw new InvalidOperationException($"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {messageLength}");
                }

                // –ß–∏—Ç–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                totalBytesRead = 0;
                while (totalBytesRead < messageLength)
                {
                    bytesRead = await _stream.ReadAsync(_buffer, 4 + totalBytesRead, messageLength - totalBytesRead);
                    if (bytesRead == 0)
                    {
                        return null; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
                    }
                    totalBytesRead += bytesRead;
                }

                return ChatProtocol.DecodeMessage(_buffer, 4 + messageLength);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                return null;
            }
        }

        private static async Task DisconnectFromServer()
        {
            _isConnected = false;
            _cancellationTokenSource.Cancel();

            try
            {
                _stream?.Close();
                _tcpClient?.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
            }
        }
    }
}
